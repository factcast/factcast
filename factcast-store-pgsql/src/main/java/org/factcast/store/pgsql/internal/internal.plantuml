@startuml

title __INTERNAL's Class Diagram__\n

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.CondensedQueryExecutor {
          - connectionStateSupplier : Supplier<Boolean>
          - currentlyScheduled : AtomicBoolean
          {static} - log : Logger
          - maxDelayInMillis : long
          - timer : Timer
          + CondensedQueryExecutor()
          + cancel()
          + onEvent()
          + trigger()
          # runTarget()
          ~ CondensedQueryExecutor()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgConstants {
          {static} + ALIAS_AGGID : String
          {static} + ALIAS_ID : String
          {static} + ALIAS_NS : String
          {static} + ALIAS_TYPE : String
          {static} + CHANNEL_NAME : String
          {static} + COLUMN_CID : String
          {static} + COLUMN_HEADER : String
          {static} + COLUMN_PAYLOAD : String
          {static} + COLUMN_SER : String
          {static} + COLUMN_VERSION : String
          {static} + CURRENT_TIME_MILLIS : String
          {static} + DELETE_CATCH_BY_CID : String
          {static} + DELETE_TOKEN : String
          {static} + INSERT_FACT : String
          {static} + INSERT_TOKEN : String
          {static} + LISTEN_ROUNDTRIP_CHANNEL_SQL : String
          {static} + LISTEN_SQL : String
          {static} + NEXT_FROM_CATCHUP_SEQ : String
          {static} + NOTIFY_ROUNDTRIP : String
          {static} + PROJECTION_FACT : String
          {static} + ROUNDTRIP_CHANNEL_NAME : String
          {static} + SELECT_BY_HEADER_JSON : String
          {static} + SELECT_BY_ID : String
          {static} + SELECT_DISTINCT_NAMESPACE : String
          {static} + SELECT_DISTINCT_TYPE_IN_NAMESPACE : String
          {static} + SELECT_FACT_FROM_CATCHUP : String
          {static} + SELECT_LATEST_FACTID_FOR_AGGID : String
          {static} + SELECT_LATEST_SER : String
          {static} + SELECT_NS_FROM_TOKEN : String
          {static} + SELECT_SER_BY_ID : String
          {static} + SELECT_STATE_FROM_TOKEN : String
          {static} + TABLE_CATCHUP : String
          {static} + TABLE_FACT : String
          {static} + UPDATE_FACT_SERIALS : String
          {static} - ALIAS_VERSION : String
          {static} - COLUMN_NAMESPACE : String
          {static} - COLUMN_STATE : String
          {static} - COLUMN_TOKEN : String
          {static} - TABLE_TOKENSTORE : String
          {static} - fromHeader()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFact {
          - aggIds : Set<UUID>
          - id : UUID
          - jsonHeader : String
          - jsonPayload : String
          - meta : Map<String, String>
          - ns : String
          - type : String
          - version : int
          + aggIds()
          {static} + from()
          + header()
          + id()
          + jsonHeader()
          + jsonPayload()
          + meta()
          + ns()
          + toString()
          + type()
          + version()
          {static} ~ toUUIDArray()
          - PgFact()
          - deser()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFact.Meta {
          - meta : Map<String, String>
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFactStore {
          {static} - BATCH_SIZE : int
          - jdbcTemplate : JdbcTemplate
          {static} - log : Logger
          + PgFactStore()
          + clearSnapshot()
          + currentTime()
          + enumerateNamespaces()
          + enumerateTypes()
          + fetchById()
          + fetchByIdAndVersion()
          + getSnapshot()
          + publish()
          + publishIfUnchanged()
          + serialOf()
          + setSnapshot()
          + subscribe()
          # getStateFor()
          - extractFactFromResultSet()
          - extractStringFromResultSet()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFactStoreInternalConfiguration {
          + eventBus()
          + factStore()
          + factTableWriteLock()
          + lockProvider()
          + meterRegistry()
          + pgCatchupFactory()
          + pgConnectionSupplier()
          + pgConnectionTester()
          + pgFactIdToSerialMapper()
          + pgLatestSerialFetcher()
          + pgListener()
          + pgMetrics()
          + pgSubscriptionFactory()
          + pgTokenStore()
          + txManager()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFactStream {
          - disconnected : AtomicBoolean
          - eventBus : EventBus
          - jdbcTemplate : JdbcTemplate
          {static} - log : Logger
          - serial : AtomicLong
          + PgFactStream()
          + close()
          ~ connect()
          - catchup()
          - catchupAndFollow()
          - initializeSerialToStartAfter()
          - isConnected()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgFactStream.FactRowCallbackHandler {
          + FactRowCallbackHandler()
          + processRow()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgMetrics {
          {static} - log : Logger
          - registry : MeterRegistry
          + PgMetrics()
          + counter()
          {static} + mapException()
          + time()
          + time()
          + time()
          + timer()
          - timer()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgMetrics.StoreMetrics {
          {static} ~ METRIC_NAME : String
          {static} ~ TAG_EXCEPTION_KEY : String
          {static} ~ TAG_EXCEPTION_VALUE_NONE : String
          {static} ~ TAG_OPERATION_KEY : String
          {static} ~ TAG_STORE_KEY : String
          {static} ~ TAG_STORE_VALUE : String
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      enum OP {
        CLEAR_SNAPSHOT
        COMPACT_SNAPSHOT_CACHE
        ENUMERATE_NAMESPACES
        ENUMERATE_TYPES
        FETCH_BY_ID
        GET_SNAPSHOT
        GET_STAGE_FOR
        MISSED_ROUNDTRIP
        NOTIFY_ROUNDTRIP_LATENCY
        PUBLISH
        PUBLISH_IF_UNCHANGED
        SERIAL_OF
        SET_SNAPSHOT
        SUBSCRIBE_CATCHUP
        SUBSCRIBE_FOLLOW
        op
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgPostQueryMatcher {
          - canBeSkipped : boolean
          {static} - log : Logger
          - matchers : List<FactSpecMatcher>
          + canBeSkipped()
          + test()
          ~ PgPostQueryMatcher()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgSubscriptionFactory {
          - eventBus : EventBus
          - jdbcTemplate : JdbcTemplate
          + PgSubscriptionFactory()
          + subscribe()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgSynchronizedQuery {
          - jdbcTemplate : JdbcTemplate
          - rowHandler : RowCallbackHandler
          - serialToContinueFrom : AtomicLong
          - setter : PreparedStatementSetter
          - sql : String
          - transactionTemplate : TransactionTemplate
          + PgSynchronizedQuery()
          + run()
          ~ PgSynchronizedQuery()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgTokenStore {
          - tpl : JdbcTemplate
          + PgTokenStore()
          + create()
          + getNs()
          + getState()
          + invalidate()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.PgTokenStore.StateJson {
          - lastFactIdByAggregate : Map<UUID, UUID>
          {static} + from()
          + toMap()
      }
    }
  }
  

  namespace org.factcast.store.pgsql {
    namespace internal {
      class org.factcast.store.pgsql.internal.RequestedVersions {
          - c : Map<String, Set<Integer>>
          + add()
          + dontCare()
          + exactVersion()
          + get()
      }
    }
  }
  

  org.factcast.store.pgsql.internal.CondensedQueryExecutor o-- org.factcast.store.pgsql.internal.PgSynchronizedQuery : target
  org.factcast.store.pgsql.internal.PgFact .up.|> org.factcast.core.Fact
  org.factcast.store.pgsql.internal.PgFact o-- org.factcast.core.FactHeader : header
  org.factcast.store.pgsql.internal.PgFact +-down- org.factcast.store.pgsql.internal.PgFact.Meta
  org.factcast.store.pgsql.internal.PgFactStore -up-|> org.factcast.core.store.AbstractFactStore
  org.factcast.store.pgsql.internal.PgFactStore o-- org.factcast.core.subscription.FactTransformerService : factTransformerService
  org.factcast.store.pgsql.internal.PgFactStore o-- org.factcast.store.pgsql.internal.lock.FactTableWriteLock : lock
  org.factcast.store.pgsql.internal.PgFactStore o-- org.factcast.store.pgsql.internal.PgMetrics : metrics
  org.factcast.store.pgsql.internal.PgFactStore o-- org.factcast.store.pgsql.internal.snapcache.SnapshotCache : snapCache
  org.factcast.store.pgsql.internal.PgFactStore o-- org.factcast.store.pgsql.internal.PgSubscriptionFactory : subscriptionFactory
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.store.pgsql.internal.CondensedQueryExecutor : condensedExecutor
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.store.pgsql.internal.query.PgLatestSerialFetcher : fetcher
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.store.pgsql.internal.query.PgFactIdToSerialMapper : idToSerMapper
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.store.pgsql.internal.catchup.PgCatchupFactory : pgCatchupFactory
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.store.pgsql.internal.PgPostQueryMatcher : postQueryMatcher
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.core.subscription.SubscriptionRequestTO : request
  org.factcast.store.pgsql.internal.PgFactStream o-- org.factcast.core.subscription.SubscriptionImpl : subscription
  org.factcast.store.pgsql.internal.PgFactStream +-down- org.factcast.store.pgsql.internal.PgFactStream.FactRowCallbackHandler
  org.factcast.store.pgsql.internal.PgFactStream.FactRowCallbackHandler .up.|> org.springframework.jdbc.core.RowCallbackHandler
  org.factcast.store.pgsql.internal.PgFactStream.FactRowCallbackHandler o-- org.factcast.store.pgsql.internal.PgPostQueryMatcher : postQueryMatcher
  org.factcast.store.pgsql.internal.PgFactStream.FactRowCallbackHandler o-- org.factcast.core.subscription.SubscriptionImpl : subscription
  org.factcast.store.pgsql.internal.PgMetrics +-down- org.factcast.store.pgsql.internal.PgMetrics.StoreMetrics
  org.factcast.store.pgsql.internal.PgMetrics.StoreMetrics +-down- org.factcast.store.pgsql.internal.PgMetrics.StoreMetrics.OP
  org.factcast.store.pgsql.internal.PgPostQueryMatcher .up.|> java.util.function.Predicate
  org.factcast.store.pgsql.internal.PgSubscriptionFactory o-- org.factcast.store.pgsql.internal.catchup.PgCatchupFactory : catchupFactory
  org.factcast.store.pgsql.internal.PgSubscriptionFactory o-- org.factcast.store.pgsql.internal.query.PgLatestSerialFetcher : fetcher
  org.factcast.store.pgsql.internal.PgSubscriptionFactory o-- org.factcast.store.pgsql.internal.query.PgFactIdToSerialMapper : idToSerialMapper
  org.factcast.store.pgsql.internal.PgSubscriptionFactory o-- org.factcast.core.subscription.FactTransformersFactory : transformersFactory
  org.factcast.store.pgsql.internal.PgSynchronizedQuery o-- org.factcast.store.pgsql.internal.query.PgLatestSerialFetcher : latestFetcher
  org.factcast.store.pgsql.internal.PgTokenStore .up.|> org.factcast.core.store.TokenStore
  org.factcast.store.pgsql.internal.PgTokenStore +-down- org.factcast.store.pgsql.internal.PgTokenStore.StateJson


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml

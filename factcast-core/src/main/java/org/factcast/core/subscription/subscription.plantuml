@startuml

title __SUBSCRIPTION's Class Diagram__\n

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.FactTransformerService {
          {abstract} + transformIfNecessary()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.FactTransformers {
          {abstract} + transformIfNecessary()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.FactTransformersFactory {
          {abstract} + createFor()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.FluentSubscriptionRequest {
          # continuous : boolean
          # debugInfo : String
          # ephemeral : boolean
          # idOnly : boolean
          # marks : boolean
          # maxBatchDelayInMs : long
          # pid : String
          # specs : List<FactSpec>
          # startingAfter : UUID
          + continuous()
          + debugInfo()
          + ephemeral()
          + idOnly()
          + marks()
          + maxBatchDelayInMs()
          + pid()
          + specs()
          + startingAfter()
          + toString()
          ~ FluentSubscriptionRequest()
          - createDebugInfo()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.FluentSubscriptionRequest.Builder {
          + Builder()
          + catchup()
          + catchup()
          + follow()
          + follow()
          + from()
          + fromNowOn()
          + fromNullable()
          + fromScratch()
          + or()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper {
          {static} - ALLOWED_NUMBER_OF_RECONNECTS_BEFORE_ESCALATION : int
          {static} - ALLOWED_TIME_BETWEEN_RECONNECTS : int
          - closed : AtomicBoolean
          - currentSubscription : AtomicReference<Subscription>
          - es : ExecutorService
          - factIdSeen : AtomicReference<UUID>
          {static} - log : Logger
          + ReconnectingFactSubscriptionWrapper()
          + awaitCatchup()
          + awaitCatchup()
          + awaitComplete()
          + awaitComplete()
          + close()
          ~ observer()
          - assertSubscriptionStateNotClosed()
          - closeAndDetachSubscription()
          - initiateReconnect()
          - isServerException()
          - sleep()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.SpecBuilder {
          {abstract} + from()
          {abstract} + fromNowOn()
          {abstract} + fromNullable()
          {abstract} + fromScratch()
          {abstract} + or()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.Subscription {
          {abstract} + awaitCatchup()
          {abstract} + awaitCatchup()
          {abstract} + awaitComplete()
          {abstract} + awaitComplete()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.SubscriptionCancelledException {
          {static} - serialVersionUID : long
          + SubscriptionCancelledException()
          + SubscriptionCancelledException()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.SubscriptionImpl {
          - catchup : CompletableFuture<Void>
          - closed : AtomicBoolean
          - complete : CompletableFuture<Void>
          {static} - log : Logger
          - observer : GenericObserver<Fact>
          - onClose : Runnable
          + SubscriptionImpl()
          + awaitCatchup()
          + awaitCatchup()
          + awaitComplete()
          + awaitComplete()
          + close()
          + notifyCatchup()
          + notifyComplete()
          + notifyElement()
          + notifyError()
          {static} + on()
          {static} + on()
          + onClose()
          - tryClose()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      interface org.factcast.core.subscription.SubscriptionRequest {
          {static} + catchup()
          {static} + catchup()
          {abstract} + continuous()
          {abstract} + debugInfo()
          {abstract} + ephemeral()
          {static} + follow()
          {static} + follow()
          {static} + follow()
          {abstract} + maxBatchDelayInMs()
          {abstract} + pid()
          {abstract} + specs()
          {abstract} + startingAfter()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.SubscriptionRequestTO {
          {static} - PID : String
          - continuous : boolean
          - debugInfo : String
          - ephemeral : boolean
          - maxBatchDelayInMs : long
          - pid : String
          - specs : List<FactSpec>
          - startingAfter : UUID
          + SubscriptionRequestTO()
          + SubscriptionRequestTO()
          + addSpecs()
          + continuous()
          + continuous()
          + debugInfo()
          + debugInfo()
          + dump()
          + ephemeral()
          + ephemeral()
          {static} + forFacts()
          + hasAnyScriptFilters()
          + maxBatchDelayInMs()
          + maxBatchDelayInMs()
          + pid()
          + pid()
          + specs()
          + startingAfter()
          + startingAfter()
          + toString()
          - checkArgument()
      }
    }
  }
  

  namespace org.factcast.core {
    namespace subscription {
      class org.factcast.core.subscription.TransformationException {
          {static} - serialVersionUID : long
          + TransformationException()
      }
    }
  }
  

  org.factcast.core.subscription.FluentSubscriptionRequest .up.|> org.factcast.core.subscription.SubscriptionRequest
  org.factcast.core.subscription.FluentSubscriptionRequest +-down- org.factcast.core.subscription.FluentSubscriptionRequest.Builder
  org.factcast.core.subscription.FluentSubscriptionRequest.Builder .up.|> org.factcast.core.subscription.SpecBuilder
  org.factcast.core.subscription.FluentSubscriptionRequest.Builder o-- org.factcast.core.subscription.FluentSubscriptionRequest : toBuild
  org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper .up.|> org.factcast.core.subscription.Subscription
  org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper o-- org.factcast.core.subscription.observer.FactObserver : observer
  org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper o-- org.factcast.core.subscription.observer.FactObserver : originalObserver
  org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper o-- org.factcast.core.subscription.SubscriptionRequestTO : originalRequest
  org.factcast.core.subscription.ReconnectingFactSubscriptionWrapper o-- org.factcast.core.store.FactStore : store
  org.factcast.core.subscription.SubscriptionImpl .up.|> org.factcast.core.subscription.Subscription
  org.factcast.core.subscription.SubscriptionImpl o-- org.factcast.core.subscription.FactTransformers : transformers
  org.factcast.core.subscription.SubscriptionRequestTO .up.|> org.factcast.core.subscription.SubscriptionRequest


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml

@startuml

title __CORE's Class Diagram__\n

  namespace org.factcast.core {
    class org.factcast.core.DefaultFact {
        - jsonHeader : String
        - jsonPayload : String
        + DefaultFact()
        + DefaultFact()
        + aggIds()
        + equals()
        + hashCode()
        + header()
        + id()
        + jsonHeader()
        + jsonPayload()
        + meta()
        + ns()
        {static} + of()
        + readExternal()
        + toString()
        + type()
        + version()
        + writeExternal()
        # DefaultFact()
        # canEqual()
        - init()
        - validate()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.DefaultFactCast {
        + DefaultFactCast()
        + enumerateNamespaces()
        + enumerateTypes()
        + fetchById()
        + fetchByIdAndVersion()
        + lock()
        + lockGlobally()
        + publish()
        + serialOf()
        + subscribe()
        + subscribeEphemeral()
    }
  }
  

  namespace org.factcast.core {
    interface org.factcast.core.Fact {
        {abstract} + aggIds()
        + before()
        {static} + builder()
        {abstract} + header()
        {abstract} + id()
        {abstract} + jsonHeader()
        {abstract} + jsonPayload()
        {abstract} + meta()
        {abstract} + ns()
        {static} + of()
        {static} + of()
        + serial()
        + timestamp()
        {abstract} + type()
        {abstract} + version()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.Fact.Builder {
        + aggId()
        + build()
        + buildWithoutPayload()
        + id()
        + meta()
        + ns()
        + type()
        + version()
    }
  }
  

  namespace org.factcast.core {
    interface org.factcast.core.FactCast {
        {static} + from()
        {static} + fromReadOnly()
        {abstract} + lock()
        {abstract} + lockGlobally()
        {abstract} + publish()
        + publish()
        + retry()
        + retry()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.FactHeader {
        - aggIds : Set<UUID>
        - id : UUID
        - meta : Map<String, String>
        - ns : String
        - type : String
        - version : int
        + aggIds()
        + equals()
        + hashCode()
        + id()
        + meta()
        + ns()
        + type()
        + version()
        # aggIds()
        # canEqual()
        # id()
        # ns()
        # type()
        # version()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.FactValidation {
        {static} + validateOnPublish()
        - FactValidation()
        {static} - lacksRequiredId()
        {static} - lacksRequiredNamespace()
        {static} - lacksRequiredType()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.FactValidationException {
        {static} - serialVersionUID : long
        + FactValidationException()
        + FactValidationException()
        {static} - render()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.MaxRetryAttemptsExceededException {
        {static} - serialVersionUID : long
        + MaxRetryAttemptsExceededException()
    }
  }
  

  namespace org.factcast.core {
    interface org.factcast.core.ReadFactCast {
        {abstract} + enumerateNamespaces()
        {abstract} + enumerateTypes()
        {abstract} + fetchById()
        {abstract} + fetchByIdAndVersion()
        {abstract} + retry()
        {abstract} + retry()
        {abstract} + serialOf()
        {abstract} + subscribe()
        {abstract} + subscribeEphemeral()
        + subscribeToFacts()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.Retry {
        {static} ~ DEFAULT_WAIT_TIME_MILLIS : long
        {static} - classLoader : ClassLoader
        {static} - log : Logger
        {static} + wrap()
        - Retry()
    }
  }
  

  namespace org.factcast.core {
    class org.factcast.core.Retry.RetryProxyInvocationHandler {
        - delegateObject : Object
        - maxRetryAttempts : int
        - minimumWaitIntervalMillis : long
        + RetryProxyInvocationHandler()
        + invoke()
        - sleep()
        - toString()
    }
  }
  

  org.factcast.core.DefaultFact .up.|> java.io.Externalizable
  org.factcast.core.DefaultFact .up.|> org.factcast.core.Fact
  org.factcast.core.DefaultFact o-- org.factcast.core.FactHeader : deserializedHeader
  org.factcast.core.DefaultFactCast .up.|> org.factcast.core.FactCast
  org.factcast.core.DefaultFactCast o-- org.factcast.core.store.FactStore : store
  org.factcast.core.Fact +-down- org.factcast.core.Fact.Builder
  org.factcast.core.Fact.Builder o-- org.factcast.core.FactHeader : header
  org.factcast.core.Retry +-down- org.factcast.core.Retry.RetryProxyInvocationHandler
  org.factcast.core.Retry.RetryProxyInvocationHandler .up.|> java.lang.reflect.InvocationHandler


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml

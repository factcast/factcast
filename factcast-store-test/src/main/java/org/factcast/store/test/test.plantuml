@startuml

title __TEST's Class Diagram__\n

  namespace org.factcast.store.test {
    abstract class org.factcast.store.test.AbstractFactStoreTest {
        {static} ~ ANY : FactSpec
        - NS : String
        + nullContracts_publishIfUnchanged()
        + testCurrentTimeProgresses()
        + testFetchById()
        + testFetchByIdAndVersion()
        + testGetStateForNullContract()
        + testPublishNullParameter()
        + testSubscribeNullContract()
        + testSubscribeStartingAfter()
        + testSubscribeToFactsParameterContract()
        {abstract} # createStoreToTest()
        # testCatchup()
        # testChecksMandatoryIdOnPublish()
        # testChecksMandatoryNamespaceOnPublish()
        # testDelayed()
        # testEmptyStore()
        # testEmptyStoreCatchupMatching()
        # testEmptyStoreEphemeral()
        # testEmptyStoreEphemeralWithCancel()
        # testEmptyStoreFollowMatching()
        # testEmptyStoreFollowMatchingDelayed()
        # testEmptyStoreFollowNonMatching()
        # testEmptyStoreFollowNonMatchingDelayed()
        # testEmptyStoreFollowWithCancel()
        # testEnumerateNameSpaces()
        # testEnumerateTypes()
        # testEnumerateTypesNull()
        # testFollow()
        # testInvalidateNullContract()
        # testMatchByOneOfAggId()
        # testMatchBySecondAggId()
        # testMatchBySingleAggId()
        # testPublishIfUnchangedNullContract()
        # testRequiredMetaAttribute()
        # testScriptedFilteringMatchAll()
        # testScriptedFilteringMatchNone()
        # testScriptedWithHeaderFiltering()
        # testScriptedWithPayloadFiltering()
        # testSerialOf()
        # testStateForNullContract()
        # testUniquenessConstraint()
        ~ abortOnAttemptReturningNull()
        ~ happyPath()
        ~ happyPathWithEmptyStore()
        ~ happyPathWithGlobalLock()
        ~ happyPathWithGlobalLockAndRetry()
        ~ happyPathWithMoreThanOneAggregate()
        ~ happyPathWithMoreThanOneAggregateAndRetry()
        ~ npeOnAggIdMissing()
        ~ npeOnAttemptIsNull()
        ~ npeOnNamespaceEmpty()
        ~ npeOnNamespaceMissing()
        ~ setUp()
        ~ shouldExecuteAndThen()
        ~ shouldExecuteAndThenOnlyOnce()
        ~ shouldNotBeBlockedByUnrelatedFact()
        ~ shouldNotExecuteAndThenDueToAbort()
        ~ shouldPassCustomAbortedException()
        ~ shouldReleaseTokenOnAbort()
        ~ shouldReleaseTokenOnPublish()
        ~ shouldReturnIdOfLastFactPublished()
        ~ shouldThrowAttemptAbortedException()
        ~ shouldThrowAttemptAbortedException_withMessage()
        ~ shouldThrowCorrectExceptionOnFailureOfAndThen()
        ~ shouldThrowRetriesExceededException()
        ~ shouldWrapExceptionIntoAttemptAbortedException()
        - catchup()
        - catchup()
        - fact()
        - newFollowTestFact()
        - newTestFact()
        - testObserver()
    }
  }
  

  namespace org.factcast.store.test {
    class org.factcast.store.test.AbstractFactStoreTest.MyAbortException {
        - i : int
        {static} - serialVersionUID : long
        + MyAbortException()
        + i()
    }
  }
  

  namespace org.factcast.store.test {
    class org.factcast.store.test.AbstractFactStoreTest.TestFactObserver {
        - values : List<Fact>
        + await()
        + onNext()
    }
  }
  

  namespace org.factcast.store.test {
    class org.factcast.store.test.AbstractFactStoreTest.ToListObserver {
        - list : List<Fact>
        + list()
        + onNext()
    }
  }
  

  namespace org.factcast.store.test {
    abstract class org.factcast.store.test.AbstractTokenStoreTest {
        + createShouldActuallyCreateARecord()
        + getNsShouldReturnAbsentForUnknownToken()
        + getStateShouldReturnAbsentForUnknownToken()
        + invalidateShouldIgnoreUnknownTokens()
        + invalidateShouldRemoteToken()
        + setup()
        + testCreateNullContract()
        + testInvalidateNullContract()
        + tokenMustMaintainNamespace()
        {abstract} # createTokenStore()
    }
  }
  

  namespace org.factcast.store.test {
    interface org.factcast.store.test.IntegrationTest {
    }
  }
  

  org.factcast.store.test.AbstractFactStoreTest o-- org.factcast.core.store.FactStore : store
  org.factcast.store.test.AbstractFactStoreTest o-- org.factcast.core.FactCast : uut
  org.factcast.store.test.AbstractFactStoreTest +-down- org.factcast.store.test.AbstractFactStoreTest.MyAbortException
  org.factcast.store.test.AbstractFactStoreTest +-down- org.factcast.store.test.AbstractFactStoreTest.TestFactObserver
  org.factcast.store.test.AbstractFactStoreTest +-down- org.factcast.store.test.AbstractFactStoreTest.ToListObserver
  org.factcast.store.test.AbstractFactStoreTest.MyAbortException -up-|> org.factcast.core.lock.AttemptAbortedException
  org.factcast.store.test.AbstractFactStoreTest.TestFactObserver .up.|> org.factcast.core.subscription.observer.FactObserver
  org.factcast.store.test.AbstractFactStoreTest.ToListObserver .up.|> org.factcast.core.subscription.observer.FactObserver
  org.factcast.store.test.AbstractTokenStoreTest o-- org.factcast.core.store.TokenStore : uut


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
